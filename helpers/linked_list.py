# linked_list.pyfrom helpers.node import Nodeclass LinkedList:    def __init__(self):        self.head = None    def append(self, location: str):        # Ensure location is stored as a string        if not isinstance(location, str):            raise TypeError("Location must be a string.")        new_node = Node(location)        if not self.head:            self.head = new_node            return        last_node = self.head        while last_node.next:            last_node = last_node.next        last_node.next = new_node    def print_list(self):        current_node = self.head        while current_node:            print(current_node.location, end=" -> ")            current_node = current_node.next        print("None")    def get_route(self):        # Return a list of location names as strings        route = []        current_node = self.head        while current_node:            route.append(current_node.location)  # Ensure this is a string            current_node = current_node.next        return route    def reverse(self):        prev_node = None        current_node = self.head        while current_node:            next_node = current_node.next            current_node.next = prev_node            prev_node = current_node            current_node = next_node        self.head = prev_node    def contains(self, location: str) -> bool:        current_node = self.head        while current_node:            if current_node.location == location:                return True            current_node = current_node.next        return False